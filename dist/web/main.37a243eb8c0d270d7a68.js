!function(t){function e(e){for(var r,o,a=e[0],c=e[1],f=e[2],s=0,p=[];s<a.length;s++)o=a[s],i[o]&&p.push(i[o][0]),i[o]=0;for(r in c)Object.prototype.hasOwnProperty.call(c,r)&&(t[r]=c[r]);for(l&&l(e);p.length;)p.shift()();return u.push.apply(u,f||[]),n()}function n(){for(var t,e=0;e<u.length;e++){for(var n=u[e],r=!0,o=1;o<n.length;o++){var c=n[o];0!==i[c]&&(r=!1)}r&&(u.splice(e--,1),t=a(a.s=n[0]))}return t}var r={},o={3:0},i={3:0},u=[];function a(e){if(r[e])return r[e].exports;var n=r[e]={i:e,l:!1,exports:{}};return t[e].call(n.exports,n,n.exports,a),n.l=!0,n.exports}a.e=function(t){var e=[];o[t]?e.push(o[t]):0!==o[t]&&{0:1,1:1}[t]&&e.push(o[t]=new Promise(function(e,n){for(var r=({0:"components-Bar",1:"components-Foo",2:"containers-App-old"}[t]||t)+".css",i=a.p+r,u=document.getElementsByTagName("link"),c=0;c<u.length;c++){var f=(l=u[c]).getAttribute("data-href")||l.getAttribute("href");if("stylesheet"===l.rel&&(f===r||f===i))return e()}var s=document.getElementsByTagName("style");for(c=0;c<s.length;c++){var l;if((f=(l=s[c]).getAttribute("data-href"))===r||f===i)return e()}var p=document.createElement("link");p.rel="stylesheet",p.type="text/css",p.onload=e,p.onerror=function(e){var r=e&&e.target&&e.target.src||i,u=new Error("Loading CSS chunk "+t+" failed.\n("+r+")");u.request=r,delete o[t],p.parentNode.removeChild(p),n(u)},p.href=i,document.getElementsByTagName("head")[0].appendChild(p)}).then(function(){o[t]=0}));var n=i[t];if(0!==n)if(n)e.push(n[2]);else{var r=new Promise(function(e,r){n=i[t]=[e,r]});e.push(n[2]=r);var u,c=document.createElement("script");c.charset="utf-8",c.timeout=120,a.nc&&c.setAttribute("nonce",a.nc),c.src=function(t){return a.p+""+t+".js"}(t),u=function(e){c.onerror=c.onload=null,clearTimeout(f);var n=i[t];if(0!==n){if(n){var r=e&&("load"===e.type?"missing":e.type),o=e&&e.target&&e.target.src,u=new Error("Loading chunk "+t+" failed.\n("+r+": "+o+")");u.type=r,u.request=o,n[1](u)}i[t]=void 0}};var f=setTimeout(function(){u({type:"timeout",target:c})},12e4);c.onerror=c.onload=u,document.head.appendChild(c)}return Promise.all(e)},a.m=t,a.c=r,a.d=function(t,e,n){a.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},a.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},a.t=function(t,e){if(1&e&&(t=a(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(a.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)a.d(n,r,function(e){return t[e]}.bind(null,r));return n},a.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return a.d(e,"a",e),e},a.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},a.p="/assets/web/",a.oe=function(t){throw console.error(t),t};var c=window.__LOADABLE_LOADED_CHUNKS__=window.__LOADABLE_LOADED_CHUNKS__||[],f=c.push.bind(c);c.push=e,c=c.slice();for(var s=0;s<c.length;s++)e(c[s]);var l=f;u.push([390,4]),n()}({0:function(t,e,n){"use strict";n.d(e,"v",function(){return a}),n.d(e,"w",function(){return F}),n.d(e,"x",function(){return s}),n.d(e,"y",function(){return N}),n.d(e,"z",function(){return h}),n.d(e,"A",function(){return d}),n.d(e,"B",function(){return g}),n.d(e,"C",function(){return U}),n.d(e,"D",function(){return M}),n.d(e,"E",function(){return B}),n.d(e,"F",function(){return I}),n.d(e,"G",function(){return H}),n.d(e,"H",function(){return q}),n.d(e,"I",function(){return z}),n.d(e,"J",function(){return $}),n.d(e,"K",function(){return G}),n.d(e,"L",function(){return J}),n.d(e,"M",function(){return K}),n.d(e,"N",function(){return X}),n.d(e,"O",function(){return W}),n.d(e,"P",function(){return Y}),n.d(e,"Q",function(){return V}),n.d(e,"R",function(){return T}),n.d(e,"S",function(){return c}),n.d(e,"T",function(){return S}),n.d(e,"U",function(){return w}),n.d(e,"a",function(){return l}),n.d(e,"b",function(){return b}),n.d(e,"c",function(){return x}),n.d(e,"d",function(){return p}),n.d(e,"e",function(){return A}),n.d(e,"f",function(){return E}),n.d(e,"g",function(){return j}),n.d(e,"h",function(){return m}),n.d(e,"i",function(){return O}),n.d(e,"j",function(){return f}),n.d(e,"k",function(){return tt}),n.d(e,"l",function(){return ut}),n.d(e,"m",function(){return at}),n.d(e,"n",function(){return it}),n.d(e,"o",function(){return ct}),n.d(e,"p",function(){return D}),n.d(e,"q",function(){return ft}),n.d(e,"r",function(){return rt}),n.d(e,"s",function(){return Q}),n.d(e,"t",function(){return et}),n.d(e,"u",function(){return nt});var r=n(4),o=n(16),i=n(2),u=n(76),a=function(t){return function(){return t}}(!0),c=function(){},f=function(t){return t};"function"==typeof Symbol&&Symbol.asyncIterator&&Symbol.asyncIterator;function s(t,e,n){if(!e(t))throw new Error(n)}var l=function(t,e){Object(o.a)(t,e),Object.getOwnPropertySymbols&&Object.getOwnPropertySymbols(e).forEach(function(n){t[n]=e[n]})},p=function(t,e){var n;return(n=[]).concat.apply(n,e.map(t))};function d(t,e){var n=t.indexOf(e);n>=0&&t.splice(n,1)}function h(t){var e=!1;return function(){e||(e=!0,t())}}var y=function(t){throw t},v=function(t){return{value:t,done:!0}};function b(t,e,n){void 0===e&&(e=y),void 0===n&&(n="iterator");var r={meta:{name:n},next:t,throw:e,return:v,isSagaIterator:!0};return"undefined"!=typeof Symbol&&(r[Symbol.iterator]=function(){return r}),r}function m(t,e){var n=e.sagaStack;console.error(t),console.error(n)}var g=function(t){return new Error("\n  redux-saga: Error checking hooks detected an inconsistent state. This is likely a bug\n  in redux-saga code and not yours. Thanks for reporting this in the project's github repo.\n  Error: "+t+"\n")},w=function(t){return Array.apply(null,new Array(t))},O=function(t){return function(e){return t(Object.defineProperty(e,r.f,{value:!0}))}},j=function(t){return t===r.k},E=function(t){return t===r.j},x=function(t){return j(t)||E(t)};function S(t,e){var n=Object.keys(t),r=n.length;var o,u=0,a=Object(i.a)(t)?w(r):{},f={};return n.forEach(function(t){var n=function(n,i){o||(i||x(n)?(e.cancel(),e(n,i)):(a[t]=n,++u===r&&(o=!0,e(a))))};n.cancel=c,f[t]=n}),e.cancel=function(){o||(o=!0,n.forEach(function(t){return f[t].cancel()}))},f}function T(t){return{name:t.name||"anonymous",location:A(t)}}function A(t){return t[r.g]}var _="Channel's Buffer overflow!",k=1,P=3,L=4,C={isEmpty:a,put:c,take:c};function R(t,e){void 0===t&&(t=10);var n=new Array(t),r=0,o=0,i=0,u=function(e){n[o]=e,o=(o+1)%t,r++},a=function(){if(0!=r){var e=n[i];return n[i]=null,r--,i=(i+1)%t,e}},c=function(){for(var t=[];r;)t.push(a());return t};return{isEmpty:function(){return 0==r},put:function(a){var f;if(r<t)u(a);else switch(e){case k:throw new Error(_);case P:n[o]=a,i=o=(o+1)%t;break;case L:f=2*t,n=c(),r=n.length,o=n.length,i=0,n.length=f,t=f,u(a)}},take:a,flush:c}}var N=function(){return C},D=function(t){return R(t,P)},F=function(t){return R(t,L)},U="TAKE",M="PUT",B="ALL",I="RACE",H="CALL",q="CPS",z="FORK",$="JOIN",G="CANCEL",J="SELECT",K="ACTION_CHANNEL",X="CANCELLED",W="FLUSH",Y="GET_CONTEXT",V="SET_CONTEXT",Q=Object.freeze({TAKE:U,PUT:M,ALL:B,RACE:I,CALL:H,CPS:q,FORK:z,JOIN:$,CANCEL:G,SELECT:J,ACTION_CHANNEL:K,CANCELLED:X,FLUSH:W,GET_CONTEXT:Y,SET_CONTEXT:V}),Z=function(t,e){var n;return(n={})[r.c]=!0,n.combinator=!1,n.type=t,n.payload=e,n};function tt(t,e){return void 0===t&&(t="*"),Object(i.i)(t)?Z(U,{pattern:t}):Object(i.f)(t)&&Object(i.g)(e)&&Object(i.i)(e)?Z(U,{channel:t,pattern:e}):Object(i.b)(t)?Z(U,{channel:t}):void 0}function et(t,e){return Object(i.o)(e)&&(e=t,t=void 0),Z(M,{channel:t,action:e})}function nt(t){var e=Z(B,t);return e.combinator=!0,e}function rt(t){var e=Z(I,t);return e.combinator=!0,e}function ot(t,e){var n,r=null;return Object(i.d)(t)?n=t:(Object(i.a)(t)?(r=t[0],n=t[1]):(r=t.context,n=t.fn),r&&Object(i.k)(n)&&Object(i.d)(r[n])&&(n=r[n])),{context:r,fn:n,args:e}}function it(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return Z(H,ot(t,n))}function ut(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return Z(z,ot(t,n))}function at(t){return void 0===t&&(t=r.h),Z(G,t)}function ct(t,e){return Z(K,{pattern:t,buffer:e})}var ft=it.bind(null,u.a)},106:function(t,e,n){(function(t){function n(t,e){for(var n=0,r=t.length-1;r>=0;r--){var o=t[r];"."===o?t.splice(r,1):".."===o?(t.splice(r,1),n++):n&&(t.splice(r,1),n--)}if(e)for(;n--;n)t.unshift("..");return t}var r=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,o=function(t){return r.exec(t).slice(1)};function i(t,e){if(t.filter)return t.filter(e);for(var n=[],r=0;r<t.length;r++)e(t[r],r,t)&&n.push(t[r]);return n}e.resolve=function(){for(var e="",r=!1,o=arguments.length-1;o>=-1&&!r;o--){var u=o>=0?arguments[o]:t.cwd();if("string"!=typeof u)throw new TypeError("Arguments to path.resolve must be strings");u&&(e=u+"/"+e,r="/"===u.charAt(0))}return(r?"/":"")+(e=n(i(e.split("/"),function(t){return!!t}),!r).join("/"))||"."},e.normalize=function(t){var r=e.isAbsolute(t),o="/"===u(t,-1);return(t=n(i(t.split("/"),function(t){return!!t}),!r).join("/"))||r||(t="."),t&&o&&(t+="/"),(r?"/":"")+t},e.isAbsolute=function(t){return"/"===t.charAt(0)},e.join=function(){var t=Array.prototype.slice.call(arguments,0);return e.normalize(i(t,function(t,e){if("string"!=typeof t)throw new TypeError("Arguments to path.join must be strings");return t}).join("/"))},e.relative=function(t,n){function r(t){for(var e=0;e<t.length&&""===t[e];e++);for(var n=t.length-1;n>=0&&""===t[n];n--);return e>n?[]:t.slice(e,n-e+1)}t=e.resolve(t).substr(1),n=e.resolve(n).substr(1);for(var o=r(t.split("/")),i=r(n.split("/")),u=Math.min(o.length,i.length),a=u,c=0;c<u;c++)if(o[c]!==i[c]){a=c;break}var f=[];for(c=a;c<o.length;c++)f.push("..");return(f=f.concat(i.slice(a))).join("/")},e.sep="/",e.delimiter=":",e.dirname=function(t){var e=o(t),n=e[0],r=e[1];return n||r?(r&&(r=r.substr(0,r.length-1)),n+r):"."},e.basename=function(t,e){var n=o(t)[2];return e&&n.substr(-1*e.length)===e&&(n=n.substr(0,n.length-e.length)),n},e.extname=function(t){return o(t)[3]};var u="b"==="ab".substr(-1)?function(t,e,n){return t.substr(e,n)}:function(t,e,n){return e<0&&(e=t.length+e),t.substr(e,n)}}).call(this,n(113))},107:function(t,e,n){"use strict";t.exports=n(188)},108:function(t,e,n){"use strict";(function(t,r){var o,i=n(173);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==t?t:r;var u=Object(i.a)(o);e.a=u}).call(this,n(47),n(189)(t))},111:function(t,e,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},n=0;n<10;n++)e["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(e).map(function(t){return e[t]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(t){r[t]=t}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(t){return!1}}()?Object.assign:function(t,e){for(var n,u,a=function(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}(t),c=1;c<arguments.length;c++){for(var f in n=Object(arguments[c]))o.call(n,f)&&(a[f]=n[f]);if(r){u=r(n);for(var s=0;s<u.length;s++)i.call(n,u[s])&&(a[u[s]]=n[u[s]])}}return a}},112:function(t,e,n){"use strict";n.d(e,"f",function(){return s});n(4),n(16);var r=n(2),o=n(0);n.d(e,"c",function(){return o.s}),n.d(e,"e",function(){return o.t}),n.d(e,"a",function(){return o.u}),n.d(e,"b",function(){return o.n}),n.d(e,"d",function(){return o.l});n(76);var i=function(t){return{done:!0,value:t}},u={};function a(t){return Object(r.b)(t)?"channel":Object(r.l)(t)?String(t):Object(r.d)(t)?t.name:String(t)}function c(t,e,n){var r,a,c,f=e;function s(e,n){if(f===u)return i(e);if(n&&!a)throw f=u,n;r&&r(e);var o=n?t[a](n):t[f]();return f=o.nextState,c=o.effect,r=o.stateUpdater,a=o.errorState,f===u?i(e):c}return Object(o.b)(s,function(t){return s(null,t)},n)}function f(t,e){for(var n=arguments.length,r=new Array(n>2?n-2:0),i=2;i<n;i++)r[i-2]=arguments[i];var u,f,s={done:!1,value:Object(o.k)(t)},l=function(t){return{done:!1,value:o.l.apply(void 0,[e].concat(r,[t]))}},p=function(t){return{done:!1,value:Object(o.m)(t)}},d=function(t){return u=t},h=function(t){return f=t};return c({q1:function(){return{nextState:"q2",effect:s,stateUpdater:h}},q2:function(){return u?{nextState:"q3",effect:p(u)}:{nextState:"q1",effect:l(f),stateUpdater:d}},q3:function(){return{nextState:"q1",effect:l(f),stateUpdater:d}}},"q1","takeLatest("+a(t)+", "+e.name+")")}function s(t,e){for(var n=arguments.length,r=new Array(n>2?n-2:0),i=2;i<n;i++)r[i-2]=arguments[i];return o.l.apply(void 0,[f,t,e].concat(r))}},113:function(t,e){var n,r,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function u(){throw new Error("clearTimeout has not been defined")}function a(t){if(n===setTimeout)return setTimeout(t,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(t){n=i}try{r="function"==typeof clearTimeout?clearTimeout:u}catch(t){r=u}}();var c,f=[],s=!1,l=-1;function p(){s&&c&&(s=!1,c.length?f=c.concat(f):l=-1,f.length&&d())}function d(){if(!s){var t=a(p);s=!0;for(var e=f.length;e;){for(c=f,f=[];++l<e;)c&&c[l].run();l=-1,e=f.length}c=null,s=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===u||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function h(t,e){this.fun=t,this.array=e}function y(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];f.push(new h(t,e)),1!==f.length||s||a(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},16:function(t,e,n){"use strict";function r(){return(r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}n.d(e,"a",function(){return r})},17:function(t,e,n){"use strict";var r=function(){};t.exports=r},172:function(t,e,n){"use strict";function r(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}n.d(e,"a",function(){return r})},173:function(t,e,n){"use strict";function r(t){var e,n=t.Symbol;return"function"==typeof n?n.observable?e=n.observable:(e=n("observable"),n.observable=e):e="@@observable",e}n.d(e,"a",function(){return r})},174:function(t,e,n){"use strict";(function(t){var r=n(24),o=n(109),i=n(175),u=n(178);e.a=function(e){var n=t.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__||r.d,a=Object(o.b)({sagaMonitor:i.a}),c=[a],f=Object(r.e)(u.a,e,n(r.a.apply(void 0,c)));return f.runSaga=a.run,f.close=function(){return f.dispatch(o.a)},f}}).call(this,n(47))},176:function(t,e,n){n(388),t.exports=self.fetch.bind(self)},178:function(t,e,n){"use strict";var r=n(24),o=(n(193),n(314),n(35)),i=[],u=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:i,e=arguments.length>1?arguments[1]:void 0,n=e.type,r=e.payload;switch(n){case o.b:return console.log("FETCH_USERS_REQUESTED"),t;case o.c:return console.log("FETCH_USERS_SUCCEEDED: ",r),r;default:return t}};e.a=Object(r.c)({users:u})},184:function(t,e,n){"use strict";t.exports=n(185)},185:function(t,e,n){"use strict";(function(t){
/** @license React v0.13.3
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(e,"__esModule",{value:!0});var n=null,r=!1,o=3,i=-1,u=-1,a=!1,c=!1;function f(){if(!a){var t=n.expirationTime;c?E():c=!0,j(p,t)}}function s(){var t=n,e=n.next;if(n===e)n=null;else{var r=n.previous;n=r.next=e,e.previous=r}t.next=t.previous=null,r=t.callback,e=t.expirationTime,t=t.priorityLevel;var i=o,a=u;o=t,u=e;try{var c=r()}finally{o=i,u=a}if("function"==typeof c)if(c={callback:c,priorityLevel:t,expirationTime:e,next:null,previous:null},null===n)n=c.next=c.previous=c;else{r=null,t=n;do{if(t.expirationTime>=e){r=t;break}t=t.next}while(t!==n);null===r?r=n:r===n&&(n=c,f()),(e=r.previous).next=r.previous=c,c.next=r,c.previous=e}}function l(){if(-1===i&&null!==n&&1===n.priorityLevel){a=!0;try{do{s()}while(null!==n&&1===n.priorityLevel)}finally{a=!1,null!==n?f():c=!1}}}function p(t){a=!0;var o=r;r=t;try{if(t)for(;null!==n;){var i=e.unstable_now();if(!(n.expirationTime<=i))break;do{s()}while(null!==n&&n.expirationTime<=i)}else if(null!==n)do{s()}while(null!==n&&!x())}finally{a=!1,r=o,null!==n?f():c=!1,l()}}var d,h,y=Date,v="function"==typeof setTimeout?setTimeout:void 0,b="function"==typeof clearTimeout?clearTimeout:void 0,m="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,g="function"==typeof cancelAnimationFrame?cancelAnimationFrame:void 0;function w(t){d=m(function(e){b(h),t(e)}),h=v(function(){g(d),t(e.unstable_now())},100)}if("object"==typeof performance&&"function"==typeof performance.now){var O=performance;e.unstable_now=function(){return O.now()}}else e.unstable_now=function(){return y.now()};var j,E,x,S=null;if("undefined"!=typeof window?S=window:void 0!==t&&(S=t),S&&S._schedMock){var T=S._schedMock;j=T[0],E=T[1],x=T[2],e.unstable_now=T[3]}else if("undefined"==typeof window||"function"!=typeof MessageChannel){var A=null,_=function(t){if(null!==A)try{A(t)}finally{A=null}};j=function(t){null!==A?setTimeout(j,0,t):(A=t,setTimeout(_,0,!1))},E=function(){A=null},x=function(){return!1}}else{"undefined"!=typeof console&&("function"!=typeof m&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof g&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));var k=null,P=!1,L=-1,C=!1,R=!1,N=0,D=33,F=33;x=function(){return N<=e.unstable_now()};var U=new MessageChannel,M=U.port2;U.port1.onmessage=function(){P=!1;var t=k,n=L;k=null,L=-1;var r=e.unstable_now(),o=!1;if(0>=N-r){if(!(-1!==n&&n<=r))return C||(C=!0,w(B)),k=t,void(L=n);o=!0}if(null!==t){R=!0;try{t(o)}finally{R=!1}}};var B=function(t){if(null!==k){w(B);var e=t-N+F;e<F&&D<F?(8>e&&(e=8),F=e<D?D:e):D=e,N=t+F,P||(P=!0,M.postMessage(void 0))}else C=!1};j=function(t,e){k=t,L=e,R||0>e?M.postMessage(void 0):C||(C=!0,w(B))},E=function(){k=null,P=!1,L=-1}}e.unstable_ImmediatePriority=1,e.unstable_UserBlockingPriority=2,e.unstable_NormalPriority=3,e.unstable_IdlePriority=5,e.unstable_LowPriority=4,e.unstable_runWithPriority=function(t,n){switch(t){case 1:case 2:case 3:case 4:case 5:break;default:t=3}var r=o,u=i;o=t,i=e.unstable_now();try{return n()}finally{o=r,i=u,l()}},e.unstable_next=function(t){switch(o){case 1:case 2:case 3:var n=3;break;default:n=o}var r=o,u=i;o=n,i=e.unstable_now();try{return t()}finally{o=r,i=u,l()}},e.unstable_scheduleCallback=function(t,r){var u=-1!==i?i:e.unstable_now();if("object"==typeof r&&null!==r&&"number"==typeof r.timeout)r=u+r.timeout;else switch(o){case 1:r=u+-1;break;case 2:r=u+250;break;case 5:r=u+1073741823;break;case 4:r=u+1e4;break;default:r=u+5e3}if(t={callback:t,priorityLevel:o,expirationTime:r,next:null,previous:null},null===n)n=t.next=t.previous=t,f();else{u=null;var a=n;do{if(a.expirationTime>r){u=a;break}a=a.next}while(a!==n);null===u?u=n:u===n&&(n=t,f()),(r=u.previous).next=u.previous=t,t.next=u,t.previous=r}return t},e.unstable_cancelCallback=function(t){var e=t.next;if(null!==e){if(e===t)n=null;else{t===n&&(n=e);var r=t.previous;r.next=e,e.previous=r}t.next=t.previous=null}},e.unstable_wrapCallback=function(t){var n=o;return function(){var r=o,u=i;o=n,i=e.unstable_now();try{return t.apply(this,arguments)}finally{o=r,i=u,l()}}},e.unstable_getCurrentPriorityLevel=function(){return o},e.unstable_shouldYield=function(){return!r&&(null!==n&&n.expirationTime<u||x())},e.unstable_continueExecution=function(){null!==n&&f()},e.unstable_pauseExecution=function(){},e.unstable_getFirstCallbackNode=function(){return n}}).call(this,n(47))},188:function(t,e,n){"use strict";
/** @license React v16.8.3
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(e,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,u=r?Symbol.for("react.fragment"):60107,a=r?Symbol.for("react.strict_mode"):60108,c=r?Symbol.for("react.profiler"):60114,f=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,l=r?Symbol.for("react.async_mode"):60111,p=r?Symbol.for("react.concurrent_mode"):60111,d=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,y=r?Symbol.for("react.memo"):60115,v=r?Symbol.for("react.lazy"):60116;function b(t){if("object"==typeof t&&null!==t){var e=t.$$typeof;switch(e){case o:switch(t=t.type){case l:case p:case u:case c:case a:case h:return t;default:switch(t=t&&t.$$typeof){case s:case d:case f:return t;default:return e}}case v:case y:case i:return e}}}function m(t){return b(t)===p}e.typeOf=b,e.AsyncMode=l,e.ConcurrentMode=p,e.ContextConsumer=s,e.ContextProvider=f,e.Element=o,e.ForwardRef=d,e.Fragment=u,e.Lazy=v,e.Memo=y,e.Portal=i,e.Profiler=c,e.StrictMode=a,e.Suspense=h,e.isValidElementType=function(t){return"string"==typeof t||"function"==typeof t||t===u||t===p||t===c||t===a||t===h||"object"==typeof t&&null!==t&&(t.$$typeof===v||t.$$typeof===y||t.$$typeof===f||t.$$typeof===s||t.$$typeof===d)},e.isAsyncMode=function(t){return m(t)||b(t)===l},e.isConcurrentMode=m,e.isContextConsumer=function(t){return b(t)===s},e.isContextProvider=function(t){return b(t)===f},e.isElement=function(t){return"object"==typeof t&&null!==t&&t.$$typeof===o},e.isForwardRef=function(t){return b(t)===d},e.isFragment=function(t){return b(t)===u},e.isLazy=function(t){return b(t)===v},e.isMemo=function(t){return b(t)===y},e.isPortal=function(t){return b(t)===i},e.isProfiler=function(t){return b(t)===c},e.isStrictMode=function(t){return b(t)===a},e.isSuspense=function(t){return b(t)===h}},189:function(t,e){t.exports=function(t){if(!t.webpackPolyfill){var e=Object.create(t);e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),Object.defineProperty(e,"exports",{enumerable:!0}),e.webpackPolyfill=1}return e}},190:function(t,e,n){(function(t){var r=Object.getOwnPropertyDescriptors||function(t){for(var e=Object.keys(t),n={},r=0;r<e.length;r++)n[e[r]]=Object.getOwnPropertyDescriptor(t,e[r]);return n},o=/%[sdj%]/g;e.format=function(t){if(!b(t)){for(var e=[],n=0;n<arguments.length;n++)e.push(a(arguments[n]));return e.join(" ")}n=1;for(var r=arguments,i=r.length,u=String(t).replace(o,function(t){if("%%"===t)return"%";if(n>=i)return t;switch(t){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(t){return"[Circular]"}default:return t}}),c=r[n];n<i;c=r[++n])y(c)||!w(c)?u+=" "+c:u+=" "+a(c);return u},e.deprecate=function(n,r){if(void 0!==t&&!0===t.noDeprecation)return n;if(void 0===t)return function(){return e.deprecate(n,r).apply(this,arguments)};var o=!1;return function(){if(!o){if(t.throwDeprecation)throw new Error(r);t.traceDeprecation?console.trace(r):console.error(r),o=!0}return n.apply(this,arguments)}};var i,u={};function a(t,n){var r={seen:[],stylize:f};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),h(n)?r.showHidden=n:n&&e._extend(r,n),m(r.showHidden)&&(r.showHidden=!1),m(r.depth)&&(r.depth=2),m(r.colors)&&(r.colors=!1),m(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=c),s(r,t,r.depth)}function c(t,e){var n=a.styles[e];return n?"["+a.colors[n][0]+"m"+t+"["+a.colors[n][1]+"m":t}function f(t,e){return t}function s(t,n,r){if(t.customInspect&&n&&E(n.inspect)&&n.inspect!==e.inspect&&(!n.constructor||n.constructor.prototype!==n)){var o=n.inspect(r,t);return b(o)||(o=s(t,o,r)),o}var i=function(t,e){if(m(e))return t.stylize("undefined","undefined");if(b(e)){var n="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(n,"string")}if(v(e))return t.stylize(""+e,"number");if(h(e))return t.stylize(""+e,"boolean");if(y(e))return t.stylize("null","null")}(t,n);if(i)return i;var u=Object.keys(n),a=function(t){var e={};return t.forEach(function(t,n){e[t]=!0}),e}(u);if(t.showHidden&&(u=Object.getOwnPropertyNames(n)),j(n)&&(u.indexOf("message")>=0||u.indexOf("description")>=0))return l(n);if(0===u.length){if(E(n)){var c=n.name?": "+n.name:"";return t.stylize("[Function"+c+"]","special")}if(g(n))return t.stylize(RegExp.prototype.toString.call(n),"regexp");if(O(n))return t.stylize(Date.prototype.toString.call(n),"date");if(j(n))return l(n)}var f,w="",x=!1,S=["{","}"];(d(n)&&(x=!0,S=["[","]"]),E(n))&&(w=" [Function"+(n.name?": "+n.name:"")+"]");return g(n)&&(w=" "+RegExp.prototype.toString.call(n)),O(n)&&(w=" "+Date.prototype.toUTCString.call(n)),j(n)&&(w=" "+l(n)),0!==u.length||x&&0!=n.length?r<0?g(n)?t.stylize(RegExp.prototype.toString.call(n),"regexp"):t.stylize("[Object]","special"):(t.seen.push(n),f=x?function(t,e,n,r,o){for(var i=[],u=0,a=e.length;u<a;++u)A(e,String(u))?i.push(p(t,e,n,r,String(u),!0)):i.push("");return o.forEach(function(o){o.match(/^\d+$/)||i.push(p(t,e,n,r,o,!0))}),i}(t,n,r,a,u):u.map(function(e){return p(t,n,r,a,e,x)}),t.seen.pop(),function(t,e,n){if(t.reduce(function(t,e){return 0,e.indexOf("\n")>=0&&0,t+e.replace(/\u001b\[\d\d?m/g,"").length+1},0)>60)return n[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+n[1];return n[0]+e+" "+t.join(", ")+" "+n[1]}(f,w,S)):S[0]+w+S[1]}function l(t){return"["+Error.prototype.toString.call(t)+"]"}function p(t,e,n,r,o,i){var u,a,c;if((c=Object.getOwnPropertyDescriptor(e,o)||{value:e[o]}).get?a=c.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):c.set&&(a=t.stylize("[Setter]","special")),A(r,o)||(u="["+o+"]"),a||(t.seen.indexOf(c.value)<0?(a=y(n)?s(t,c.value,null):s(t,c.value,n-1)).indexOf("\n")>-1&&(a=i?a.split("\n").map(function(t){return"  "+t}).join("\n").substr(2):"\n"+a.split("\n").map(function(t){return"   "+t}).join("\n")):a=t.stylize("[Circular]","special")),m(u)){if(i&&o.match(/^\d+$/))return a;(u=JSON.stringify(""+o)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(u=u.substr(1,u.length-2),u=t.stylize(u,"name")):(u=u.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),u=t.stylize(u,"string"))}return u+": "+a}function d(t){return Array.isArray(t)}function h(t){return"boolean"==typeof t}function y(t){return null===t}function v(t){return"number"==typeof t}function b(t){return"string"==typeof t}function m(t){return void 0===t}function g(t){return w(t)&&"[object RegExp]"===x(t)}function w(t){return"object"==typeof t&&null!==t}function O(t){return w(t)&&"[object Date]"===x(t)}function j(t){return w(t)&&("[object Error]"===x(t)||t instanceof Error)}function E(t){return"function"==typeof t}function x(t){return Object.prototype.toString.call(t)}function S(t){return t<10?"0"+t.toString(10):t.toString(10)}e.debuglog=function(n){if(m(i)&&(i=Object({IS_BROWSER:!0}).NODE_DEBUG||""),n=n.toUpperCase(),!u[n])if(new RegExp("\\b"+n+"\\b","i").test(i)){var r=t.pid;u[n]=function(){var t=e.format.apply(e,arguments);console.error("%s %d: %s",n,r,t)}}else u[n]=function(){};return u[n]},e.inspect=a,a.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},a.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.isArray=d,e.isBoolean=h,e.isNull=y,e.isNullOrUndefined=function(t){return null==t},e.isNumber=v,e.isString=b,e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=m,e.isRegExp=g,e.isObject=w,e.isDate=O,e.isError=j,e.isFunction=E,e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=n(191);var T=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function A(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.log=function(){var t,n;console.log("%s - %s",(t=new Date,n=[S(t.getHours()),S(t.getMinutes()),S(t.getSeconds())].join(":"),[t.getDate(),T[t.getMonth()],n].join(" ")),e.format.apply(e,arguments))},e.inherits=n(192),e._extend=function(t,e){if(!e||!w(e))return t;for(var n=Object.keys(e),r=n.length;r--;)t[n[r]]=e[n[r]];return t};var _="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function k(t,e){if(!t){var n=new Error("Promise was rejected with a falsy value");n.reason=t,t=n}return e(t)}e.promisify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');if(_&&t[_]){var e;if("function"!=typeof(e=t[_]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(e,_,{value:e,enumerable:!1,writable:!1,configurable:!0}),e}function e(){for(var e,n,r=new Promise(function(t,r){e=t,n=r}),o=[],i=0;i<arguments.length;i++)o.push(arguments[i]);o.push(function(t,r){t?n(t):e(r)});try{t.apply(this,o)}catch(t){n(t)}return r}return Object.setPrototypeOf(e,Object.getPrototypeOf(t)),_&&Object.defineProperty(e,_,{value:e,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(e,r(t))},e.promisify.custom=_,e.callbackify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');function n(){for(var n=[],r=0;r<arguments.length;r++)n.push(arguments[r]);var o=n.pop();if("function"!=typeof o)throw new TypeError("The last argument must be of type Function");var i=this,u=function(){return o.apply(i,arguments)};e.apply(this,n).then(function(e){t.nextTick(u,null,e)},function(e){t.nextTick(k,e,u)})}return Object.setPrototypeOf(n,Object.getPrototypeOf(e)),Object.defineProperties(n,r(e)),n}}).call(this,n(113))},191:function(t,e){t.exports=function(t){return t&&"object"==typeof t&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8}},192:function(t,e){"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(t,e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},2:function(t,e,n){"use strict";n.d(e,"o",function(){return o}),n.d(e,"g",function(){return i}),n.d(e,"d",function(){return u}),n.d(e,"k",function(){return a}),n.d(e,"a",function(){return c}),n.d(e,"h",function(){return f}),n.d(e,"j",function(){return s}),n.d(e,"e",function(){return l}),n.d(e,"n",function(){return p}),n.d(e,"i",function(){return d}),n.d(e,"b",function(){return h}),n.d(e,"l",function(){return y}),n.d(e,"m",function(){return v}),n.d(e,"f",function(){return b}),n.d(e,"c",function(){return m});var r=n(4),o=function(t){return null==t},i=function(t){return null!=t},u=function(t){return"function"==typeof t},a=function(t){return"string"==typeof t},c=Array.isArray,f=function(t){return t&&!c(t)&&"object"==typeof t},s=function(t){return t&&u(t.then)},l=function(t){return t&&u(t.next)&&u(t.throw)},p=function(t){return t&&t[r.i]},d=function t(e){return e&&(a(e)||v(e)||u(e)||c(e)&&e.every(t))},h=function(t){return t&&u(t.take)&&u(t.close)},y=function(t){return u(t)&&t.hasOwnProperty("toString")},v=function(t){return Boolean(t)&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype},b=function(t){return h(t)&&t[r.e]},m=function(t){return t&&t[r.c]}},29:function(t,e,n){"use strict";function r(t,e){if(null==t)return{};var n,r,o={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}n.d(e,"a",function(){return r})},30:function(t,e,n){t.exports=n(386)},35:function(t,e,n){"use strict";n.d(e,"b",function(){return r}),n.d(e,"c",function(){return o}),n.d(e,"a",function(){return i}),n.d(e,"d",function(){return u});var r="FETCH_USERS_REQUESTED",o="FETCH_USERS_SUCCEEDED",i="FETCH_USERS_FAILED",u=function(){return{type:r}}},386:function(t,e,n){var r=function(){return this||"object"==typeof self&&self}()||Function("return this")(),o=r.regeneratorRuntime&&Object.getOwnPropertyNames(r).indexOf("regeneratorRuntime")>=0,i=o&&r.regeneratorRuntime;if(r.regeneratorRuntime=void 0,t.exports=n(387),o)r.regeneratorRuntime=i;else try{delete r.regeneratorRuntime}catch(t){r.regeneratorRuntime=void 0}},387:function(t,e){!function(e){"use strict";var n,r=Object.prototype,o=r.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},u=i.iterator||"@@iterator",a=i.asyncIterator||"@@asyncIterator",c=i.toStringTag||"@@toStringTag",f="object"==typeof t,s=e.regeneratorRuntime;if(s)f&&(t.exports=s);else{(s=e.regeneratorRuntime=f?t.exports:{}).wrap=w;var l="suspendedStart",p="suspendedYield",d="executing",h="completed",y={},v={};v[u]=function(){return this};var b=Object.getPrototypeOf,m=b&&b(b(L([])));m&&m!==r&&o.call(m,u)&&(v=m);var g=x.prototype=j.prototype=Object.create(v);E.prototype=g.constructor=x,x.constructor=E,x[c]=E.displayName="GeneratorFunction",s.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===E||"GeneratorFunction"===(e.displayName||e.name))},s.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,x):(t.__proto__=x,c in t||(t[c]="GeneratorFunction")),t.prototype=Object.create(g),t},s.awrap=function(t){return{__await:t}},S(T.prototype),T.prototype[a]=function(){return this},s.AsyncIterator=T,s.async=function(t,e,n,r){var o=new T(w(t,e,n,r));return s.isGeneratorFunction(e)?o:o.next().then(function(t){return t.done?t.value:o.next()})},S(g),g[c]="Generator",g[u]=function(){return this},g.toString=function(){return"[object Generator]"},s.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},s.values=L,P.prototype={constructor:P,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(k),!t)for(var e in this)"t"===e.charAt(0)&&o.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(r,o){return a.type="throw",a.arg=t,e.next=r,o&&(e.method="next",e.arg=n),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var u=this.tryEntries[i],a=u.completion;if("root"===u.tryLoc)return r("end");if(u.tryLoc<=this.prev){var c=o.call(u,"catchLoc"),f=o.call(u,"finallyLoc");if(c&&f){if(this.prev<u.catchLoc)return r(u.catchLoc,!0);if(this.prev<u.finallyLoc)return r(u.finallyLoc)}else if(c){if(this.prev<u.catchLoc)return r(u.catchLoc,!0)}else{if(!f)throw new Error("try statement without catch or finally");if(this.prev<u.finallyLoc)return r(u.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&o.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var i=r;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var u=i?i.completion:{};return u.type=t,u.arg=e,i?(this.method="next",this.next=i.finallyLoc,y):this.complete(u)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),k(n),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;k(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:L(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=n),y}}}function w(t,e,n,r){var o=e&&e.prototype instanceof j?e:j,i=Object.create(o.prototype),u=new P(r||[]);return i._invoke=function(t,e,n){var r=l;return function(o,i){if(r===d)throw new Error("Generator is already running");if(r===h){if("throw"===o)throw i;return C()}for(n.method=o,n.arg=i;;){var u=n.delegate;if(u){var a=A(u,n);if(a){if(a===y)continue;return a}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===l)throw r=h,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=d;var c=O(t,e,n);if("normal"===c.type){if(r=n.done?h:p,c.arg===y)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(r=h,n.method="throw",n.arg=c.arg)}}}(t,n,u),i}function O(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}function j(){}function E(){}function x(){}function S(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function T(t){var e;this._invoke=function(n,r){function i(){return new Promise(function(e,i){!function e(n,r,i,u){var a=O(t[n],t,r);if("throw"!==a.type){var c=a.arg,f=c.value;return f&&"object"==typeof f&&o.call(f,"__await")?Promise.resolve(f.__await).then(function(t){e("next",t,i,u)},function(t){e("throw",t,i,u)}):Promise.resolve(f).then(function(t){c.value=t,i(c)},function(t){return e("throw",t,i,u)})}u(a.arg)}(n,r,e,i)})}return e=e?e.then(i,i):i()}}function A(t,e){var r=t.iterator[e.method];if(r===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=n,A(t,e),"throw"===e.method))return y;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return y}var o=O(r,t.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,y;var i=o.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=n),e.delegate=null,y):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,y)}function _(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function k(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function P(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(_,this),this.reset(!0)}function L(t){if(t){var e=t[u];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,i=function e(){for(;++r<t.length;)if(o.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=n,e.done=!0,e};return i.next=i}}return{next:C}}function C(){return{value:n,done:!0}}}(function(){return this||"object"==typeof self&&self}()||Function("return this")())},388:function(t,e,n){"use strict";n.r(e),n.d(e,"Headers",function(){return f}),n.d(e,"Request",function(){return v}),n.d(e,"Response",function(){return m}),n.d(e,"DOMException",function(){return w}),n.d(e,"fetch",function(){return O});var r={searchParams:"URLSearchParams"in self,iterable:"Symbol"in self&&"iterator"in Symbol,blob:"FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in self,arrayBuffer:"ArrayBuffer"in self};if(r.arrayBuffer)var o=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],i=ArrayBuffer.isView||function(t){return t&&o.indexOf(Object.prototype.toString.call(t))>-1};function u(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function a(t){return"string"!=typeof t&&(t=String(t)),t}function c(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return r.iterable&&(e[Symbol.iterator]=function(){return e}),e}function f(t){this.map={},t instanceof f?t.forEach(function(t,e){this.append(e,t)},this):Array.isArray(t)?t.forEach(function(t){this.append(t[0],t[1])},this):t&&Object.getOwnPropertyNames(t).forEach(function(e){this.append(e,t[e])},this)}function s(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function l(t){return new Promise(function(e,n){t.onload=function(){e(t.result)},t.onerror=function(){n(t.error)}})}function p(t){var e=new FileReader,n=l(e);return e.readAsArrayBuffer(t),n}function d(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function h(){return this.bodyUsed=!1,this._initBody=function(t){var e;this._bodyInit=t,t?"string"==typeof t?this._bodyText=t:r.blob&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:r.formData&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:r.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():r.arrayBuffer&&r.blob&&((e=t)&&DataView.prototype.isPrototypeOf(e))?(this._bodyArrayBuffer=d(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):r.arrayBuffer&&(ArrayBuffer.prototype.isPrototypeOf(t)||i(t))?this._bodyArrayBuffer=d(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):r.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},r.blob&&(this.blob=function(){var t=s(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?s(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(p)}),this.text=function(){var t,e,n,r=s(this);if(r)return r;if(this._bodyBlob)return t=this._bodyBlob,e=new FileReader,n=l(e),e.readAsText(t),n;if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),n=new Array(e.length),r=0;r<e.length;r++)n[r]=String.fromCharCode(e[r]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},r.formData&&(this.formData=function(){return this.text().then(b)}),this.json=function(){return this.text().then(JSON.parse)},this}f.prototype.append=function(t,e){t=u(t),e=a(e);var n=this.map[t];this.map[t]=n?n+", "+e:e},f.prototype.delete=function(t){delete this.map[u(t)]},f.prototype.get=function(t){return t=u(t),this.has(t)?this.map[t]:null},f.prototype.has=function(t){return this.map.hasOwnProperty(u(t))},f.prototype.set=function(t,e){this.map[u(t)]=a(e)},f.prototype.forEach=function(t,e){for(var n in this.map)this.map.hasOwnProperty(n)&&t.call(e,this.map[n],n,this)},f.prototype.keys=function(){var t=[];return this.forEach(function(e,n){t.push(n)}),c(t)},f.prototype.values=function(){var t=[];return this.forEach(function(e){t.push(e)}),c(t)},f.prototype.entries=function(){var t=[];return this.forEach(function(e,n){t.push([n,e])}),c(t)},r.iterable&&(f.prototype[Symbol.iterator]=f.prototype.entries);var y=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function v(t,e){var n,r,o=(e=e||{}).body;if(t instanceof v){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new f(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,o||null==t._bodyInit||(o=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new f(e.headers)),this.method=(n=e.method||this.method||"GET",r=n.toUpperCase(),y.indexOf(r)>-1?r:n),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&o)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(o)}function b(t){var e=new FormData;return t.trim().split("&").forEach(function(t){if(t){var n=t.split("="),r=n.shift().replace(/\+/g," "),o=n.join("=").replace(/\+/g," ");e.append(decodeURIComponent(r),decodeURIComponent(o))}}),e}function m(t,e){e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"OK",this.headers=new f(e.headers),this.url=e.url||"",this._initBody(t)}v.prototype.clone=function(){return new v(this,{body:this._bodyInit})},h.call(v.prototype),h.call(m.prototype),m.prototype.clone=function(){return new m(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new f(this.headers),url:this.url})},m.error=function(){var t=new m(null,{status:0,statusText:""});return t.type="error",t};var g=[301,302,303,307,308];m.redirect=function(t,e){if(-1===g.indexOf(e))throw new RangeError("Invalid status code");return new m(null,{status:e,headers:{location:t}})};var w=self.DOMException;try{new w}catch(t){(w=function(t,e){this.message=t,this.name=e;var n=Error(t);this.stack=n.stack}).prototype=Object.create(Error.prototype),w.prototype.constructor=w}function O(t,e){return new Promise(function(n,o){var i=new v(t,e);if(i.signal&&i.signal.aborted)return o(new w("Aborted","AbortError"));var u=new XMLHttpRequest;function a(){u.abort()}u.onload=function(){var t,e,r={status:u.status,statusText:u.statusText,headers:(t=u.getAllResponseHeaders()||"",e=new f,t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach(function(t){var n=t.split(":"),r=n.shift().trim();if(r){var o=n.join(":").trim();e.append(r,o)}}),e)};r.url="responseURL"in u?u.responseURL:r.headers.get("X-Request-URL");var o="response"in u?u.response:u.responseText;n(new m(o,r))},u.onerror=function(){o(new TypeError("Network request failed"))},u.ontimeout=function(){o(new TypeError("Network request failed"))},u.onabort=function(){o(new w("Aborted","AbortError"))},u.open(i.method,i.url,!0),"include"===i.credentials?u.withCredentials=!0:"omit"===i.credentials&&(u.withCredentials=!1),"responseType"in u&&r.blob&&(u.responseType="blob"),i.headers.forEach(function(t,e){u.setRequestHeader(e,t)}),i.signal&&(i.signal.addEventListener("abort",a),u.onreadystatechange=function(){4===u.readyState&&i.signal.removeEventListener("abort",a)}),u.send(void 0===i._bodyInit?null:i._bodyInit)})}O.polyfill=!0,self.fetch||(self.fetch=O,self.Headers=f,self.Request=v,self.Response=m)},390:function(t,e,n){"use strict";n.r(e);var r=n(1),o=n.n(r),i=n(171),u=n(392),a=n(170),c=n(46),f=n(174),s=n(30),l=n.n(s),p=n(5),d=n(176),h=n.n(d),y=n(35),v=l.a.mark(g),b=l.a.mark(w),m=function(){return h()("https://api.github.com/gists").then(function(t){return t.ok?t.json():function(){throw"error"}})};function g(){var t;return l.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,console.log("fetchGists saga"),e.next=4,Object(p.b)(m);case 4:return t=e.sent,console.log("responseFromApi gists: ",t),e.next=8,Object(p.e)({type:y.c,payload:t});case 8:e.next=14;break;case 10:return e.prev=10,e.t0=e.catch(0),e.next=14,Object(p.e)({type:y.a,payload:e.t0});case 14:case"end":return e.stop()}},v,null,[[0,10]])}function w(){return l.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Object(p.f)(y.b,g);case 2:case"end":return t.stop()}},b)}var O=l.a.mark(j);function j(){return l.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Object(p.a)([Object(p.d)(w)]);case 2:case"end":return t.stop()}},O)}var E=n(394),x=n(393),S=n(391),T=function(){return o.a.createElement("nav",null,o.a.createElement("ul",null,o.a.createElement(S.a,{to:"/"},o.a.createElement("li",null,"Home")),o.a.createElement(S.a,{to:"/foo"},o.a.createElement("li",null,"Foo")),o.a.createElement(S.a,{to:"/bar"},o.a.createElement("li",null,"Bar"))))},A=n(80),_=o.a.Fragment,k=function(){return"serviceWorker"in navigator&&window.addEventListener("load",function(){navigator.serviceWorker.register("assets/web/service-worker.js").then(function(t){console.log("SW registered: ",t)}).catch(function(t){console.log("SW registration failed: ",t)})}),o.a.createElement(_,null,o.a.createElement(T,null),o.a.createElement("main",{id:"main-content"},o.a.createElement(E.a,null,o.a.createElement(x.a,{exact:!0,path:"/",component:function(){return o.a.createElement(A.c,null)}}),o.a.createElement(x.a,{path:"/foo",component:function(){return o.a.createElement(A.b,null)}}),o.a.createElement(x.a,{path:"/bar",component:function(){return o.a.createElement(A.a,null)}}))))},P=window.__PRELOADED_STATE__,L=Object(f.a)(P);L.runSaga(j),Object(c.b)(function(){Object(i.hydrate)(o.a.createElement(a.a,{store:L},o.a.createElement(u.a,null,o.a.createElement(k,null))),document.getElementById("app"))})},4:function(t,e,n){"use strict";n.d(e,"a",function(){return o}),n.d(e,"b",function(){return i}),n.d(e,"c",function(){return u}),n.d(e,"d",function(){return a}),n.d(e,"e",function(){return c}),n.d(e,"f",function(){return f}),n.d(e,"h",function(){return s}),n.d(e,"i",function(){return l}),n.d(e,"j",function(){return p}),n.d(e,"k",function(){return d}),n.d(e,"g",function(){return h});var r=function(t){return"@@redux-saga/"+t},o=r("CANCEL_PROMISE"),i=r("CHANNEL_END"),u=r("IO"),a=r("MATCH"),c=r("MULTICAST"),f=r("SAGA_ACTION"),s=r("SELF_CANCELLATION"),l=r("TASK"),p=r("TASK_CANCEL"),d=r("TERMINATE"),h=r("LOCATION")},45:function(t,e,n){"use strict";function r(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}n.d(e,"a",function(){return r})},47:function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},57:function(t,e,n){"use strict";var r=n(107),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},u={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},a={};function c(t){return r.isMemo(t)?u:a[t.$$typeof]||o}a[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var f=Object.defineProperty,s=Object.getOwnPropertyNames,l=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,d=Object.getPrototypeOf,h=Object.prototype;t.exports=function t(e,n,r){if("string"!=typeof n){if(h){var o=d(n);o&&o!==h&&t(e,o,r)}var u=s(n);l&&(u=u.concat(l(n)));for(var a=c(e),y=c(n),v=0;v<u.length;++v){var b=u[v];if(!(i[b]||r&&r[b]||y&&y[b]||a&&a[b])){var m=p(n,b);try{f(e,b,m)}catch(t){}}}return e}return e}},76:function(t,e,n){"use strict";var r=n(4);e.a=function(t,e){var n;void 0===e&&(e=!0);var o=new Promise(function(r){n=setTimeout(r,t,e)});return o[r.a]=function(){clearTimeout(n)},o}},77:function(t,e,n){"use strict";var r=n(4),o=n(16),i=n(29),u=n(2),a=n(0),c=n(24);function f(){var t={};return t.promise=new Promise(function(e,n){t.resolve=e,t.reject=n}),t}var s=f;n(76);n.d(e,"a",function(){return S});var l=[],p=0;function d(t){try{v(),t()}finally{b()}}function h(t){l.push(t),p||(v(),m())}function y(t){try{return v(),t()}finally{m()}}function v(){p++}function b(){p--}function m(){var t;for(b();!p&&void 0!==(t=l.shift());)d(t)}var g=function(t){return function(e){return t.some(function(t){return x(t)(e)})}},w=function(t){return function(e){return t(e)}},O=function(t){return function(e){return e.type===String(t)}},j=function(t){return function(e){return e.type===t}},E=function(){return a.v};function x(t){var e="*"===t?E:Object(u.k)(t)?O:Object(u.a)(t)?g:Object(u.l)(t)?O:Object(u.d)(t)?w:Object(u.m)(t)?j:null;if(null===e)throw new Error("invalid pattern: "+t);return e(t)}var S={type:r.b},T=function(t){return t&&t.type===r.b};function A(t){void 0===t&&(t=Object(a.w)());var e=!1,n=[];return{take:function(r){e&&t.isEmpty()?r(S):t.isEmpty()?(n.push(r),r.cancel=function(){Object(a.A)(n,r)}):r(t.take())},put:function(r){if(!e){if(0===n.length)return t.put(r);n.shift()(r)}},flush:function(n){e&&t.isEmpty()?n(S):n(t.flush())},close:function(){if(!e){e=!0;var t=n;n=[];for(var r=0,o=t.length;r<o;r++)(0,t[r])(S)}}}}function _(){var t,e,n,o,i,u,c=(e=!1,o=n=[],i=function(){o===n&&(o=n.slice())},u=function(){e=!0;var t=n=o;o=[],t.forEach(function(t){t(S)})},(t={})[r.e]=!0,t.put=function(t){if(!e)if(T(t))u();else for(var i=n=o,a=0,c=i.length;a<c;a++){var f=i[a];f[r.d](t)&&(f.cancel(),f(t))}},t.take=function(t,n){void 0===n&&(n=E),e?t(S):(t[r.d]=n,i(),o.push(t),t.cancel=Object(a.z)(function(){i(),Object(a.A)(o,t)}))},t.close=u,t),f=c.put;return c.put=function(t){t[r.f]?f(t):h(function(){f(t)})},c}var k=0,P=1,L=2,C=3;function R(t,e){var n=t[r.a];Object(u.d)(n)&&(e.cancel=n),t.then(e,function(t){e(t,!0)})}var N,D=0,F=function(){return++D};function U(t){t.isRunning()&&t.cancel()}var M=((N={})[a.C]=function(t,e,n){var o=e.channel,i=void 0===o?t.channel:o,a=e.pattern,c=e.maybe,f=function(t){t instanceof Error?n(t,!0):!T(t)||c?n(t):n(r.k)};try{i.take(f,Object(u.g)(a)?x(a):null)}catch(t){return void n(t,!0)}n.cancel=f.cancel},N[a.D]=function(t,e,n){var r=e.channel,o=e.action,i=e.resolve;h(function(){var e;try{e=(r?r.put:t.dispatch)(o)}catch(t){return void n(t,!0)}i&&Object(u.j)(e)?R(e,n):n(e)})},N[a.E]=function(t,e,n,r){var o=r.digestEffect,i=D,c=Object.keys(e);if(0!==c.length){var f=Object(a.T)(e,n);c.forEach(function(t){o(e[t],i,f[t],t)})}else n(Object(u.a)(e)?[]:{})},N[a.F]=function(t,e,n,r){var o=r.digestEffect,i=D,c=Object.keys(e),f=Object(u.a)(e)?Object(a.U)(c.length):{},s={},l=!1;c.forEach(function(t){var e=function(e,r){l||(r||Object(a.c)(e)?(n.cancel(),n(e,r)):(n.cancel(),l=!0,f[t]=e,n(f)))};e.cancel=a.S,s[t]=e}),n.cancel=function(){l||(l=!0,c.forEach(function(t){return s[t].cancel()}))},c.forEach(function(t){l||o(e[t],i,s[t],t)})},N[a.G]=function(t,e,n,r){var o=e.context,i=e.fn,c=e.args,f=r.task;try{var s=i.apply(o,c);if(Object(u.j)(s))return void R(s,n);if(Object(u.e)(s))return void X(t,s,f.context,D,Object(a.R)(i),!1,n);n(s)}catch(t){n(t,!0)}},N[a.H]=function(t,e,n){var r=e.context,o=e.fn,i=e.args;try{var a=function(t,e){Object(u.o)(t)?n(e):n(t,!0)};o.apply(r,i.concat(a)),a.cancel&&(n.cancel=a.cancel)}catch(t){n(t,!0)}},N[a.I]=function(t,e,n,r){var o=e.context,i=e.fn,c=e.args,f=e.detached,s=r.task,l=function(t){var e=t.context,n=t.fn,r=t.args;try{var o=n.apply(e,r);if(Object(u.e)(o))return o;var i=!1;return Object(a.b)(function(t){return i?{value:t,done:!0}:(i=!0,{value:o,done:!Object(u.j)(o)})})}catch(t){return Object(a.b)(function(){throw t})}}({context:o,fn:i,args:c}),p=function(t,e){return t.isSagaIterator?{name:t.meta.name}:Object(a.R)(e)}(l,i);y(function(){var e=X(t,l,s.context,D,p,f,a.S);f?n(e):e.isRunning()?(s.queue.addTask(e),n(e)):e.isAborted()?s.queue.abort(e.error()):n(e)})},N[a.J]=function(t,e,n,r){var o=r.task,i=function(t,e){if(t.isRunning()){var n={task:o,cb:e};e.cancel=function(){t.isRunning()&&Object(a.A)(t.joiners,n)},t.joiners.push(n)}else t.isAborted()?e(t.error(),!0):e(t.result())};if(Object(u.a)(e)){if(0===e.length)return void n([]);var c=Object(a.T)(e,n);e.forEach(function(t,e){i(t,c[e])})}else i(e,n)},N[a.K]=function(t,e,n,o){var i=o.task;e===r.h?U(i):Object(u.a)(e)?e.forEach(U):U(e),n()},N[a.L]=function(t,e,n){var r=e.selector,o=e.args;try{n(r.apply(void 0,[t.getState()].concat(o)))}catch(t){n(t,!0)}},N[a.M]=function(t,e,n){var r=e.pattern,o=A(e.buffer),i=x(r),u=function e(n){T(n)||t.channel.take(e,i),o.put(n)},a=o.close;o.close=function(){u.cancel(),a()},t.channel.take(u,i),n(o)},N[a.N]=function(t,e,n,r){n(r.task.isCancelled())},N[a.O]=function(t,e,n){e.flush(n)},N[a.P]=function(t,e,n,r){n(r.task.context[e])},N[a.Q]=function(t,e,n,r){var o=r.task;Object(a.a)(o.context,e),n()},N);function B(t,e){return t+"?"+e}function I(t){var e=t.name,n=t.location;return n?e+"  "+B(n.fileName,n.lineNumber):e}var H=null,q=[],z=function(t){t.crashedEffect=H,q.push(t)},$=function(){H=null,q.length=0},G=function(t){H=t},J=function(){var t,e,n,r,o=q[0],i=q.slice(1),u=o.crashedEffect?(t=o.crashedEffect,(e=Object(a.e)(t))?e.code+"  "+B(e.fileName,e.lineNumber):""):null;return["The above error occurred in task "+I(o.meta)+(u?" \n when executing effect "+u:"")].concat(i.map(function(t){return"    created by "+I(t.meta)}),[(n=q,r=Object(a.d)(function(t){return t.cancelledTasks},n),r.length?["Tasks cancelled due to error:"].concat(r).join("\n"):"")]).join("\n")};function K(t,e,n,o,i,u,c){var f,l,p,d=k,h=null,y=[],v=Object.create(n),b=function(t,e,n){var r,o=[],i=!1;function u(t){e(),f(),n(t,!0)}function c(e){o.push(e),e.cont=function(c,f){i||(Object(a.A)(o,e),e.cont=a.S,f?u(c):(e===t&&(r=c),o.length||(i=!0,n(r))))}}function f(){i||(i=!0,o.forEach(function(t){t.cont=a.S,t.cancel()}),o=[])}return c(t),{addTask:c,cancelAll:f,abort:u,getTasks:function(){return o}}}(e,function(){y.push.apply(y,b.getTasks().map(function(t){return t.meta.name}))},m);function m(e,n){if(n){if(d=L,z({meta:i,cancelledTasks:y}),g.isRoot){var o=J();$(),t.onError(e,{sagaStack:o})}p=e,h&&h.reject(e)}else e===r.j?d=P:d!==P&&(d=C),l=e,h&&h.resolve(e);g.cont(e,n),g.joiners.forEach(function(t){t.cb(e,n)}),g.joiners=null}var g=((f={})[r.i]=!0,f.id=o,f.meta=i,f.isRoot=u,f.context=v,f.joiners=[],f.queue=b,f.cancel=function(){d===k&&(d=P,b.cancelAll(),m(r.j,!1))},f.cont=c,f.end=m,f.setContext=function(t){Object(a.a)(v,t)},f.toPromise=function(){return h?h.promise:(h=s(),d===L?h.reject(p):d!==k&&h.resolve(l),h.promise)},f.isRunning=function(){return d===k},f.isCancelled=function(){return d===P||d===k&&e.status===P},f.isAborted=function(){return d===L},f.result=function(){return l},f.error=function(){return p},f);return g}function X(t,e,n,o,i,c,f){var s=t.finalizeRunEffect(function(e,n,o){if(Object(u.j)(e))R(e,o);else if(Object(u.e)(e))X(t,e,p.context,n,i,!1,o);else if(e&&e[r.c]){var a=M[e.type];a(t,e.payload,o,d)}else o(e)});h.cancel=a.S;var l={meta:i,cancel:function(){l.status===k&&(l.status=P,h(r.j))},status:k},p=K(t,l,n,o,i,c,f),d={task:p,digestEffect:y};return f.cancel=p.cancel,h(),p;function h(t,n){try{var i;n?(i=e.throw(t),$()):Object(a.f)(t)?(l.status=P,h.cancel(),i=Object(u.d)(e.return)?e.return(r.j):{done:!0,value:r.j}):i=Object(a.g)(t)?Object(u.d)(e.return)?e.return():{done:!0}:e.next(t),i.done?(l.status!==P&&(l.status=C),l.cont(i.value)):y(i.value,o,h)}catch(t){if(l.status===P)throw t;l.status=L,l.cont(t,!0)}}function y(e,n,r,o){void 0===o&&(o="");var i,u=F();function c(n,o){i||(i=!0,r.cancel=a.S,t.sagaMonitor&&(o?t.sagaMonitor.effectRejected(u,n):t.sagaMonitor.effectResolved(u,n)),o&&G(e),r(n,o))}t.sagaMonitor&&t.sagaMonitor.effectTriggered({effectId:u,parentEffectId:n,label:o,effect:e}),c.cancel=a.S,r.cancel=function(){i||(i=!0,c.cancel(),c.cancel=a.S,t.sagaMonitor&&t.sagaMonitor.effectCancelled(u))},s(e,u,c)}}e.b=function(t){void 0===t&&(t={});var e,n=t,r=n.context,u=void 0===r?{}:r,f=n.channel,s=void 0===f?_():f,l=n.sagaMonitor,p=Object(i.a)(n,["context","channel","sagaMonitor"]);function d(t){var n=t.getState,r=t.dispatch;return e=function(t,e){for(var n=t.channel,r=void 0===n?_():n,o=t.dispatch,i=t.getState,u=t.context,f=void 0===u?{}:u,s=t.sagaMonitor,l=t.effectMiddlewares,p=t.onError,d=void 0===p?a.h:p,h=arguments.length,v=new Array(h>2?h-2:0),b=2;b<h;b++)v[b-2]=arguments[b];var m,g=e.apply(void 0,v),w=F();if(s&&(s.rootSagaStarted=s.rootSagaStarted||a.S,s.effectTriggered=s.effectTriggered||a.S,s.effectResolved=s.effectResolved||a.S,s.effectRejected=s.effectRejected||a.S,s.effectCancelled=s.effectCancelled||a.S,s.actionDispatched=s.actionDispatched||a.S,s.rootSagaStarted({effectId:w,saga:e,args:v})),l){var O=c.d.apply(void 0,l);m=function(t){return function(e,n,r){return O(function(e){return t(e,n,r)})(e)}}}else m=a.j;var j={channel:r,dispatch:Object(a.i)(o),getState:i,sagaMonitor:s,onError:d,finalizeRunEffect:m};return y(function(){var t=X(j,g,f,w,Object(a.R)(e),!0,a.S);return s&&s.effectResolved(w,t),t})}.bind(null,Object(o.a)({},p,{context:u,channel:s,dispatch:r,getState:n,sagaMonitor:l})),function(t){return function(e){l&&l.actionDispatched&&l.actionDispatched(e);var n=t(e);return s.put(e),n}}}return d.run=function(){return e.apply(void 0,arguments)},d.setContext=function(t){Object(a.a)(u,t)},d}},79:function(t,e,n){"use strict";var r=n(9),o=n.n(r),i=n(8),u=n.n(i);function a(t){return"/"===t.charAt(0)}function c(t,e){for(var n=e,r=n+1,o=t.length;r<o;n+=1,r+=1)t[n]=t[r];t.pop()}var f=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=t&&t.split("/")||[],r=e&&e.split("/")||[],o=t&&a(t),i=e&&a(e),u=o||i;if(t&&a(t)?r=n:n.length&&(r.pop(),r=r.concat(n)),!r.length)return"/";var f=void 0;if(r.length){var s=r[r.length-1];f="."===s||".."===s||""===s}else f=!1;for(var l=0,p=r.length;p>=0;p--){var d=r[p];"."===d?c(r,p):".."===d?(c(r,p),l++):l&&(c(r,p),l--)}if(!u)for(;l--;l)r.unshift("..");!u||""===r[0]||r[0]&&a(r[0])||r.unshift("");var h=r.join("/");return f&&"/"!==h.substr(-1)&&(h+="/"),h};"function"==typeof Symbol&&Symbol.iterator;var s=function(t){return"/"===t.charAt(0)?t:"/"+t},l=function(t,e){return new RegExp("^"+e+"(\\/|\\?|#|$)","i").test(t)},p=function(t,e){return l(t,e)?t.substr(e.length):t},d=function(t){return"/"===t.charAt(t.length-1)?t.slice(0,-1):t},h=function(t){var e=t.pathname,n=t.search,r=t.hash,o=e||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o},y=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},v=function(t,e,n,r){var o=void 0;"string"==typeof t?(o=function(t){var e=t||"/",n="",r="",o=e.indexOf("#");-1!==o&&(r=e.substr(o),e=e.substr(0,o));var i=e.indexOf("?");return-1!==i&&(n=e.substr(i),e=e.substr(0,i)),{pathname:e,search:"?"===n?"":n,hash:"#"===r?"":r}}(t)).state=e:(void 0===(o=y({},t)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==e&&void 0===o.state&&(o.state=e));try{o.pathname=decodeURI(o.pathname)}catch(t){throw t instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):t}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=f(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o},b=function(){var t=null,e=[];return{setPrompt:function(e){return o()(null==t,"A history supports only one prompt at a time"),t=e,function(){t===e&&(t=null)}},confirmTransitionTo:function(e,n,r,i){if(null!=t){var u="function"==typeof t?t(e,n):t;"string"==typeof u?"function"==typeof r?r(u,i):(o()(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),i(!0)):i(!1!==u)}else i(!0)},appendListener:function(t){var n=!0,r=function(){n&&t.apply(void 0,arguments)};return e.push(r),function(){n=!1,e=e.filter(function(t){return t!==r})}},notifyListeners:function(){for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];e.forEach(function(t){return t.apply(void 0,n)})}}},m=!("undefined"==typeof window||!window.document||!window.document.createElement),g=function(t,e,n){return t.addEventListener?t.addEventListener(e,n,!1):t.attachEvent("on"+e,n)},w=function(t,e,n){return t.removeEventListener?t.removeEventListener(e,n,!1):t.detachEvent("on"+e,n)},O=function(t,e){return e(window.confirm(t))},j="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},E=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},x=function(){try{return window.history.state||{}}catch(t){return{}}},S=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};u()(m,"Browser history needs a DOM");var e,n=window.history,r=(-1===(e=window.navigator.userAgent).indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,i=!(-1===window.navigator.userAgent.indexOf("Trident")),a=t.forceRefresh,c=void 0!==a&&a,f=t.getUserConfirmation,y=void 0===f?O:f,S=t.keyLength,T=void 0===S?6:S,A=t.basename?d(s(t.basename)):"",_=function(t){var e=t||{},n=e.key,r=e.state,i=window.location,u=i.pathname+i.search+i.hash;return o()(!A||l(u,A),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+u+'" to begin with "'+A+'".'),A&&(u=p(u,A)),v(u,r,n)},k=function(){return Math.random().toString(36).substr(2,T)},P=b(),L=function(t){E($,t),$.length=n.length,P.notifyListeners($.location,$.action)},C=function(t){(function(t){return void 0===t.state&&-1===navigator.userAgent.indexOf("CriOS")})(t)||D(_(t.state))},R=function(){D(_(x()))},N=!1,D=function(t){N?(N=!1,L()):P.confirmTransitionTo(t,"POP",y,function(e){e?L({action:"POP",location:t}):F(t)})},F=function(t){var e=$.location,n=M.indexOf(e.key);-1===n&&(n=0);var r=M.indexOf(t.key);-1===r&&(r=0);var o=n-r;o&&(N=!0,I(o))},U=_(x()),M=[U.key],B=function(t){return A+h(t)},I=function(t){n.go(t)},H=0,q=function(t){1===(H+=t)?(g(window,"popstate",C),i&&g(window,"hashchange",R)):0===H&&(w(window,"popstate",C),i&&w(window,"hashchange",R))},z=!1,$={length:n.length,action:"POP",location:U,createHref:B,push:function(t,e){o()(!("object"===(void 0===t?"undefined":j(t))&&void 0!==t.state&&void 0!==e),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var i=v(t,e,k(),$.location);P.confirmTransitionTo(i,"PUSH",y,function(t){if(t){var e=B(i),u=i.key,a=i.state;if(r)if(n.pushState({key:u,state:a},null,e),c)window.location.href=e;else{var f=M.indexOf($.location.key),s=M.slice(0,-1===f?0:f+1);s.push(i.key),M=s,L({action:"PUSH",location:i})}else o()(void 0===a,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=e}})},replace:function(t,e){o()(!("object"===(void 0===t?"undefined":j(t))&&void 0!==t.state&&void 0!==e),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var i=v(t,e,k(),$.location);P.confirmTransitionTo(i,"REPLACE",y,function(t){if(t){var e=B(i),u=i.key,a=i.state;if(r)if(n.replaceState({key:u,state:a},null,e),c)window.location.replace(e);else{var f=M.indexOf($.location.key);-1!==f&&(M[f]=i.key),L({action:"REPLACE",location:i})}else o()(void 0===a,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(e)}})},go:I,goBack:function(){return I(-1)},goForward:function(){return I(1)},block:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],e=P.setPrompt(t);return z||(q(1),z=!0),function(){return z&&(z=!1,q(-1)),e()}},listen:function(t){var e=P.appendListener(t);return q(1),function(){q(-1),e()}}};return $};Object.assign,"function"==typeof Symbol&&Symbol.iterator,Object.assign;n.d(e,"a",function(){return S}),n.d(e,"b",function(){return v})},8:function(t,e,n){"use strict";t.exports=function(t,e,n,r,o,i,u,a){if(!t){var c;if(void 0===e)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var f=[n,r,o,i,u,a],s=0;(c=new Error(e.replace(/%s/g,function(){return f[s++]}))).name="Invariant Violation"}throw c.framesToPop=1,c}}},80:function(t,e,n){"use strict";(function(t){n.d(e,"c",function(){return o}),n.d(e,"b",function(){return i}),n.d(e,"a",function(){return u});var r=n(46),o=Object(r.a)({chunkName:function(){return"containers-App-old"},isReady:function(t){return!!n.m[this.resolve(t)]},requireAsync:function(){return n.e(2).then(n.bind(null,179))},requireSync:function t(e){var r=this.resolve(e);return n(r)},resolve:function(){return 179}}),i=Object(r.a)({chunkName:function(){return"components-Foo"},isReady:function(t){return!!n.m[this.resolve(t)]},requireAsync:function(){return n.e(1).then(n.bind(null,180))},requireSync:function t(e){var r=this.resolve(e);return n(r)},resolve:function(){return 180}}),u=Object(r.a)({chunkName:function(){return"components-Bar"},isReady:function(t){return!!n.m[this.resolve(t)]},requireAsync:function(){return n.e(0).then(n.bind(null,181))},requireSync:function t(e){var r=this.resolve(e);return n(r)},resolve:function(){return 181}})}).call(this,"/")},82:function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},9:function(t,e,n){"use strict";t.exports=function(){}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,